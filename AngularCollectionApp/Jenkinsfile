node('master') {
    stage('import') {
        try {
            git branch: 'develop', url: 'https://github.com/1804-Apr-USFdotnet/Project2-QuadCore-Bookmarker.git'
        }
        catch (exc) {
            slackError('import')
            throw exc
        }
    }
    stage('build') {
        try {
            dir ('AngularCollectionApp') {
                bat 'npm install'
                bat 'npm run build'
            }
        }
        catch (exc) {
            slackError('build')
            throw exc
        }
    }
    stage('analyze') {
        try {
            dir('AngularCollectionApp') {
                // bat 'sonar-scanner.bat -Dsonar.projectKey=ao221662 -Dsonar.sources=.\\src -Dproject.settings=C:\\tools\\sonarqube\\sonarcloud.properties'
            }
        }
        catch (exc) {
            slackError('analyze')
            throw exc
        }
    }
    stage('test') {
        try {
            // dir('AngularCollectionApp') {
            // 	bat 'npm test'
            // }
        }
        catch (exc) {
            slackError('test')
            throw exc
        }
    }
    stage('package') {
        try {
            dir('AngularCollectionApp') {
                // winds up as: ng build --base-href /Bookmarker/ --prod
                bat 'npm run build -- --base-href /Bookmarker/ --prod'
                // bat 'copy /y web.config dist'
                // // ng build inside jenkins workspace doesn't
                // bat 'copy /y src\\favicon.ico dist'
                // bat 'md dist\\assets\\images'
                // bat 'copy /y src\\assets\\images\\*.png dist\\assets\\images'
            }
        }
        catch (exc) {
            slackError('package')
            throw exc
        }
    }
    stage('deploy') {
        try {
            dir('AngularCollectionApp') {
                bat "msdeploy -verb:sync -source:contentPath=\"%CD%\" -dest:contentPath=\"Default Web Site/Bookmarker\",wmsvc=ec2-18-219-24-228.us-east-2.compute.amazonaws.com ,userName=Administrator,password=\"${env.Deploy_Password_Angular}\" -enableRule:AppOffline -allowUntrusted"
            }
        }
        catch (exc) {
            slackError('deploy')
            throw exc
        }
    }
}

def slackError(stageName) {
    slackSend color: 'danger', message: "FAILED ${stageName} stage: [<${JOB_URL}|${env.JOB_NAME}> <${env.BUILD_URL}console|${env.BUILD_DISPLAY_NAME}>] [${currentBuild.durationString.replace(' and counting', '')}]"
}
